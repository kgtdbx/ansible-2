#!/usr/bin/python
# -*- coding: utf-8 -*-

# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import os
import datetime

DOCUMENTATION = '''
---
module: weblogic_bsu
version_added: devel
short_description: apply patch to weblogic 
options:


author: Marcin Przepiorowski 
'''

EXAMPLES = '''
'''

def bsu_check(module):
    
    rc, weblogic_patch, err, changed  = (0,'','',False)
    mw_home = module.params['mw_home'].rstrip('/') 
    req_patch_id = module.params['patch_id'].strip()

    wls_server_path = mw_home + "/wlserver_10.3"
    bsu_path = mw_home + "/utils/bsu"
    
    rc, out, err = module.run_command(["./bsu.sh","-view","-status=applied","-prod_dir=" + wls_server_path ], cwd=bsu_path)
    # return if error
    if (rc <> 0):
       return (rc, out, err, changed)

    # set rc to 1 to fail if there is no patch
    rc = 1
    for i in out.split("\n"):
       if ( "Patch ID:" in i):
          temp_patch_id=i.split(':')[1]
          weblogic_patch=temp_patch_id.split()[0].strip()
	  #print "test " + weblogic_patch + " do " +req_patch_id
          if (weblogic_patch == req_patch_id):
	     #print "jest match " + weblogic_patch + " do " +req_patch_id
             # patch id found
             rc = 0
        

       
    return (rc, out, err, changed) 

def bsu_install(module):

    rc, weblogic_patch, err, changed, conflicts  = (0,'','',False,'')
    mw_home = module.params['mw_home'].rstrip('/')
    req_patch_id = module.params['patch_id'].strip()

    wls_server_path = mw_home + "/wlserver_10.3"
    bsu_path = mw_home + "/utils/bsu"

    rc, out, err = module.run_command(["./bsu.sh","-install","-patchlist=" + req_patch_id,"-prod_dir=" + wls_server_path ], cwd=bsu_path)
    # return if error
    if (rc <> 0):
       return (rc, out, err, changed)

    # set rc to 1 to fail if there is no patch
    rc = 1
    for i in out.split("\n"):
       if ( "Result: Success" in i):
          rc = 0
          changed = True
       if ( "Patch already installed:" in i):
          temp_patch_id=i.split(':')[1].strip()
          if (temp_patch_id == req_patch_id):
             rc = 0
             changed = False
       if ( "mutually exclusive and cannot coexist with patch" in i):
          temp_patch_id=i.split(':')[1].strip()
          rc = 1
          changed = False
          conflicts = temp_patch_id



    return (rc, out, err, changed, conflicts)

def bsu_remove(module, force_patch_id):

    rc, weblogic_patch, err, changed, conflicts  = (0,'','',False,'')
    mw_home = module.params['mw_home'].rstrip('/')
    req_patch_id = module.params['patch_id'].strip()

    if force_patch_id:
       req_patch_id = force_patch_id

    wls_server_path = mw_home + "/wlserver_10.3"
    bsu_path = mw_home + "/utils/bsu"

    rc, out, err = module.run_command(["./bsu.sh","-remove","-patchlist=" + req_patch_id,"-prod_dir=" + wls_server_path ], cwd=bsu_path)
    # return if error
    if (rc <> 0):
       return (rc, out, err, changed)

    # set rc to 1 to fail if there is no patch
    rc = 1
    for i in out.split("\n"):
       if ( "Result: Success" in i):
          rc = 0
          changed = True
       if ( "Patch not installed:" in i):
          temp_patch_id=i.split(':')[1].strip()
          if (temp_patch_id == req_patch_id):
             rc = 0
             changed = False


    return (rc, out, err, changed, conflicts)

	
 


def main():

    module = AnsibleModule(
        argument_spec = dict(
            operation = dict(required=True, choices=['install', 'remove', 'check']),
            mw_home = dict(required=True),
            patch_id = dict(required=True),
            force = dict(required=False, choices=BOOLEANS, default=False)
        ),
    )

    startd, rc, y, err, endd, delta = (0,0,'','',0,0)


    mw_home = module.params['mw_home']
    operation = module.params['operation']
    patch_id = module.params['patch_id']
    force = module.params['force']


    if (operation == 'check'):
       rc, out, err, changed = bsu_check(module) 


    if (operation == 'install'):
       rc, out, err, changed, conflicts = bsu_install(module) 
       if force and (conflicts != ''):
          for p in conflicts.split(','):
             rc, out, err, changed, conflicts = bsu_remove(module,p)
             if rc != 0:
                module.fail_json(msg='Can''t remove patch ' + p + ' in force mode')
          rc, out, err, changed, conflicts = bsu_install(module)


    if (operation == 'remove'):
       rc, out, err, changed, conflicts = bsu_remove(module, None) 

    module.exit_json(
        stdout      = out,
        stderr      = err,
        rc          = rc,
        changed     = changed 
    )

from ansible.module_utils.basic import *
main()

