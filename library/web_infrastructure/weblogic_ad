#!/usr/bin/python
# -*- coding: utf-8 -*-

# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import os
import datetime

DOCUMENTATION = '''
---
module: weblogic_ad
version_added: devel
short_description: apply patch to weblogic
options:
  AdminServerURL:
    description:
      - Admin server URL (t3 or http)
    required: true
    default: null

  Action:
    description:
      - install / remove / check

author: Marcin Przepiorowski
'''

EXAMPLES = '''
# Show active sessions for instance RAC1 on 'dbserver'
'''

def wlst_command(module, command):

    os.environ['WLST_PROPERTIES']="-Dweblogic.security.SSL.ignoreHostnameVerification=true -Dweblogic.security.TrustKeyStore=DemoTrust "

    startd, rc, out, err, endd, delta,changed  = (0,1,'','',0,0,False)

    mw_home = module.params['mw_home'].rstrip('/')
    adminServerUrl = module.params['adminServerUrl'].strip()
    username = module.params['username'].strip()
    password = module.params['password'].strip()

    wlst_path = mw_home + "/wlserver_10.3/common/bin/wlst.sh"
    wlst_arguments = "-skipWLSModuleScanning"

    input="connect('" + username + "','" + password + "','" + adminServerUrl + "')\n"
    input+=command
    input+="\n"
    input+="exit(); \n"

    startd = datetime.datetime.now()
    rc, out, err = module.run_command( [wlst_path, wlst_arguments], data=input, check_rc=True)
    endd = datetime.datetime.now()
    delta = endd - startd

    if out is None:
        out = ''
    if err is None:
        err = ''

    return (startd, rc, out, err, endd, delta, False)


def add_restart_reqired():
    command ="s=domainRuntimeService.lookupServerRuntime('AdminServer')\n"
    command+="print ('RESTART|' + str(s.isRestartRequired()) )\n"
    command+="\n"
    return command


def check_restart_reqired(out):
    rr = 9
    for i in out.split("\n"):
        if ( "RESTART|" in i ):
           rr = i.split('|')[1];
    
    return rr


def check_provider(module):

    provider_name = module.params['provider_name']

    startd, rc, y, err, endd, delta = (0,0,'','',0,0)

    command= "realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="if provider:\n"
    command+="   print ('PRINTME|EXIST')\n"
    command+="else:\n"
    command+="   print ('PRINTME|ERROR')\n"
    command+="\n"
    command+=add_restart_reqired()

    startd, rc, out, err, endd, delta, changed = wlst_command(module, command)

#    print "IN  ----------------------------"
#    print command + "\n"
#    print "OUT ----------------------------"
#    print out + "\n"
#    print "OUT ----------------------------"


    y = 'AD provider doesn''t exist'
    rc = 1

    for i in out.split("\n"):
    #    if ( (not ("<Notice>" in i)) and (not ("<Info>" in i)) and (not ("CLASSPATH" in i)) ):
        if ( "PRINTME|EXIST" in i):
           y='AD provider exist'
           rc=0

    rr = check_restart_reqired(out)

    return (startd, rc, y, err, endd, delta, changed,rr)

def generate_prov_setting(module):

    prov_prov_parameters = module.params['prov_parameters']
    prov_setControlFlag = module.params['prov_setControlFlag']

    # set Control flag - as this is mandatory in this module
    command = ''
    command+="         provider.setControlFlag('" + prov_setControlFlag + "')\n"

    # set rest of module paramaters provided as dict module
    # example provider.setPriciple('user')
                
    for key, value in prov_prov_parameters.iteritems() :
       command+="         provider." + key + "('" + value + "')\n"

    return command


def remove_provider(module):

    provider_name = module.params['provider_name']

    startd, rc, y, err, endd, delta = (0,0,'','',0,0)

    command ="realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="if not provider:\n"
    #command+="   raise Exception('AD provider " + provider_name + " doesn''t exist')\n"
    command+="   print >> sys.stderr, 'AD provider " + provider_name + " doesn''t exist'\n"
    command+="else:\n"
    command+="   edit()\n"
    command+="   startEdit()\n"
    command+="   realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="   provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="   realm.destroyAuthenticationProvider(provider);\n"
    command+="   save()\n"
    command+="   activate(block='true')\n"
    command+="\n"
    command+=add_restart_reqired()

    startd, rc, out, err, endd, delta, changed = wlst_command(module, command)

    #print command + "\n"
    #print "---------------\n"
    #print out + "\n"
    #print "---------------\n"
    #print "Error |" + err + "|\n"

    if err == '' :
       rc = 0
       changed = True
    else:
       rc = 1

    rr = check_restart_reqired(out)

    return (startd, rc, y, err, endd, delta, changed, rr)

                
def check_provider_class( class_name ):
    wls_class_name = class_name
                
    if ( class_name == 'AD'):
       wls_class_name = 'weblogic.security.providers.authentication.ActiveDirectoryAuthenticator';

    return wls_class_name

def create_provider(module):

    provider_name = module.params['provider_name']
    prov_provider_class = module.params['prov_class']
                
    prov_provider_class = check_provider_class ( prov_provider_class )

    startd, rc, y, err, endd, delta = (0,0,'','',0,0)

    command ="realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="if provider:\n"
    command+="  raise Exception('AD provider " + provider_name + " exist')\n"
    command+="else:\n"
    command+="   edit()\n"
    command+="   startEdit()\n"
    command+="   realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="   provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="   if provider:\n"
    command+="      stopEdit('y')\n"
    command+="      raise Exception('AD provider " + provider_name + " exist')\n"
    command+="   else:\n"
    command+="      try:\n"
    command+="         provider = realm.createAuthenticationProvider('" + provider_name + "', '" + prov_provider_class + "')\n"

    command+=generate_prov_setting(module)

    command+="         save()\n"
    command+="         activate(block='true')\n"
    command+="      except AttributeError, e:\n"
    command+="         stopEdit('y')\n"
    #command+="         raise Exception ('Unknown provider attribute ' + str(e))\n"
    command+="         print >> sys.sitderr, 'Unknown provider attribute ' + str(e)\n"
    command+="\n"
    command+=add_restart_reqired()

    startd, rc, out, err, endd, delta, changed = wlst_command(module, command)

    #print "---------------\n"
    #print out + "\n"
    #print "---------------\n"
    #print "Error |" + err + "|\n"

    if err == '' :
       rc = 0
    else:
       rc = 1

    rr = check_restart_reqired(out)

    return (startd, rc, y, err, endd, delta, changed,rr)



def parameter_check_for_class(module):
    prov_parameters = module.params['prov_parameters']
    prov_class = module.params['prov_class']

    required_ad_list = ["setPrincipal", "setCredential"]
    required_ad_list_counter = 0    
    optional_ad_list = ["setGroupBaseDN", "setUserNameAttribute", "setUserFromNameFilter", "setUserBaseDN", "setGroupBaseDN", "setPort", "setHost"]

    if ( prov_class == 'AD'):
       for k, v in prov_parameters.iteritems():
          if any([k in s for s in required_ad_list]): 
             required_ad_list_counter+=1
          elif not any([k in s for s in optional_ad_list]):
             module.fail_json(msg="Unknown AD parameter " + k)

       if ( required_ad_list_counter != len(required_ad_list) ):
             module.fail_json(msg="Put all required AD parameters " + ','.join(required_ad_list))




def main():

    module = AnsibleModule(
        argument_spec = dict(
            state = dict(required=True, choices=['absent', 'present', 'check']),
            mw_home = dict(required=True),
            adminServerUrl = dict(required=True),
            username = dict(required=True),
            password = dict(required=True),
            provider_name = dict(required=True),
            prov_setControlFlag = dict(required=False,default='OPTIONAL'),
            prov_class = dict(required=True),
            prov_parameters = dict(required=False, type='dict')
        ),
    )


    parameter_check_for_class(module)
                
    state = module.params['state']

    if state == 'present':
        startd, rc, y, err, endd, delta, changed, isRestartRequired = create_provider(module)
    
    if state == 'absent':
        startd, rc, y, err, endd, delta, changed, isRestartRequired = remove_provider(module)

    if state == 'check':
        startd, rc, y, err, endd, delta, changed, isRestartRequired = check_provider(module)

    module.exit_json(
        stdout      = y,
        stderr      = err.rstrip("\r\n"),
        rc          = rc,
#        start       = str(startd),
#        end         = str(endd),
#        delta       = str(delta),
        isRestartRequired = isRestartRequired, 
        changed     = changed
    )

from ansible.module_utils.basic import *
main()
    

