#!/usr/bin/python
# -*- coding: utf-8 -*-

# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

import os
import datetime

DOCUMENTATION = '''
---
module: weblogic_ad
version_added: devel
short_description: apply patch to weblogic
options:
  AdminServerURL:
    description:
      - Admin server URL (t3 or http)
    required: true
    default: null 

  state:
    description: required state of provider [ present, absent, check ]
    required: true
    default: null

  mw_home:
    description: Middleware home 
    required: true
    default: /u01/app/oracle/Middleware 
  
  username:
    description: domain username 
    required: true
    default: null 
  
  password:
    description: domain password 
    required: true
    default: null 
  
  provider_name:
    description: provider name 
    required: true
    default: null 
  
  provider_class:
    description: provider class ( AD is a special name translated into Weblogic class ) 
    required: false 
    default: null 

  provider_parameters:
    description: provider parameters - weblogic provider parameters
    required: false 
    default: null 

  provider_order:
    description: provider order - weblogic provider order 
    required: false 
    default: null 

  Action:
    description:
      - install / remove / check / orders - authentication providers in Weblogic domain

author: Marcin Przepiorowski
'''

EXAMPLES = '''
    Check if provider exists 
    - name: check ad
      weblogic_ad:
        state=check 
        mw_home=/u01/app/oracle/Middleware 
        username=weblogic 
        password=password
        adminServerUrl=t3://localhost:7001 
        provider_name=DefaultAuthenticator

    Remove provider - if force is set to true ignore if provider doesn't exists
    - name: remove ad
      weblogic_ad:
        state=absent
        mw_home=/u01/app/oracle/Middleware
        username=weblogic
        password=password
        adminServerUrl=t3://localhost:7001
        force=yes
        provider_name=ActiveDirectory_TEST

    Add provider
    - name: add ad
      weblogic_ad:
        state=present
        mw_home=/u01/app/oracle/Middleware
        username=weblogic
        password=password
        adminServerUrl=t3://localhost:7001
        provider_name=ActiveDirectory_TEST
        provider_class='AD'
        provider_parameters="{
             \"setControlFlag\":\"OPTIONAL\" ,
             \"setPrincipal\":\"user\" ,
             \"setCredential\":\"password\" ,
             \"setPort\":\"1000\"
        } "
'''

def wlst_command(module, command):

    os.environ['WLST_PROPERTIES']="-Dweblogic.security.SSL.ignoreHostnameVerification=true -Dweblogic.security.TrustKeyStore=DemoTrust "
    rc, out, err = (0,'','')

    mw_home = module.params['mw_home'].rstrip('/')
    adminServerUrl = module.params['adminServerUrl'].strip()
    username = module.params['username'].strip()
    password = module.params['password'].strip()

    wlst_path = mw_home + "/wlserver_10.3/common/bin/wlst.sh"
    wlst_arguments = "-skipWLSModuleScanning"

    input="connect('" + username + "','" + password + "','" + adminServerUrl + "')\n"
    input+=command
    input+="\n"


    #print "---------------\n"
    #print input + "\n"
    #print "---------------\n"


    rc, out, err = module.run_command( [wlst_path, wlst_arguments], data=input )
    
    #print "---------------\n"
    #print 'Error code ' + str(rc)  + "\n"
    #print "---------------\n"

    return (rc, out, err)



def add_restart_reqired():
    command ="s=domainRuntimeService.lookupServerRuntime('AdminServer')\n"
    command+="print ('RESTART|' + str(s.isRestartRequired()) )\n"
    command+="\n"
    return command


def check_restart_reqired(out):
    rr = 9
    for i in out.split("\n"):
        if ( "RESTART|" in i ):
           rr = i.split('|')[1];

    return rr


def check_provider(module):

    provider_name = module.params['provider_name']

    rc, out, err, changed  = (0,'','',False)

    command= "realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="if provider:\n"
    command+="   exit('y',0)\n"
    command+="else:\n"
    command+="   exit('y',1)\n"
    command+="\n"
    command+=add_restart_reqired()

    rc, out, err = wlst_command(module, command)

#    print "IN  ----------------------------"
#    print command + "\n"
#    print "OUT ----------------------------"
#    print out + "\n"
#    print "OUT ----------------------------"

    rr = check_restart_reqired(out)

    if rc == 0:
       out='AD provider exist'
    else:
       out='AD provider doesn''t exist'


    return (rc, out, err, changed,rr)

def generate_prov_setting(module):

    prov_provider_parameters = module.params['provider_parameters']
    command = ''
    
    # escape special characters in text values
    specialchars= ['\\','\"','\'']
    escape = lambda s, escapechar, specialchars: "".join(escapechar + c if c in specialchars or c == escapechar else c for c in s)

    # set rest of module paramaters provided as dict module
    # example provider.setPriciple('user')

    if ( prov_provider_parameters != None ):
       for key, value in prov_provider_parameters.iteritems() :
          #if (key == 'setPort'):
          if (value.isdigit()):
             command+="      provider." + key + "(" + escape(str(value), "\\", specialchars) + ")\n"
          else:
             command+="      provider." + key + "('" + escape(str(value), "\\", specialchars) + "')\n"

    return command


def remove_provider(module):

    provider_name = module.params['provider_name']
    force = module.params['force']

    rc, out, err, changed  = (0,'','',False)
    
    command ="edit()\n"
    command+="startEdit()\n"
    command+="rc=9\n"
    command+="realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="if not provider:\n"
    command+="   print >> sys.stderr, 'AD provider " + provider_name + " doesn''t exist'\n"
    command+="   stopEdit('y')\n"
    command+="   rc=1\n"
    command+="else:\n"
    command+="   realm.destroyAuthenticationProvider(provider);\n"
    command+="   save()\n"
    command+="   activate(block='true')\n"
    command+="   rc=0\n"
    command+="\n"
    command+=add_restart_reqired()
    command+="\n"
    command+="exit('y',rc)\n"

    rc, out, err = wlst_command(module, command)

    #print command + "\n"
    #print "---------------\n"
    #print out + "\n"
    #print "---------------\n"
    #print "Force |" + force + "|\n"

    rr = check_restart_reqired(out)

    # Translate WLST script output code into Ansible RC and CHANGED variables    
    if rc == 0:
       rc = 0
       changed = True    

    if rc == 1:
       if force:
          rc = 0
       else:
          rc = 1
       changed = False    

       
    return (rc, out, err, changed, rr)


def change_order(module):

    provider_order = module.params['provider_order']
    rc, out, err, changed  = (0,'','',False)
    
    command ="new_order = " + ",".join( '\'' + p + '\'' for p in  provider_order) + "\n"
    command+="edit()\n"
    command+="startEdit()\n"
    command+="rc=0\n"
    command+="providers = []\n"
    command+="realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="for p in new_order:\n"
    command+="   providers.append(realm.lookupAuthenticationProvider(p))\n"
    command+="\n"
    command+="realm.setAuthenticationProviders(providers)\n"
    command+="save()\n"
    command+="activate()\n"
    command+="\n"
    command+=add_restart_reqired()
    command+="\n"
    command+="exit('y',rc)\n"

    rc, out, err = wlst_command(module, command)

#    print "IN  ----------------------------"
#    print command + "\n"
#    print "OUT ----------------------------"
#    print out + "\n"
#    print "OUT ----------------------------"

    rr = check_restart_reqired(out)

    # Translate WLST script output code into Ansible RC and CHANGED variables    
    if rc == 0:
       rc = 0
       changed = False    


    return (rc, out, err, changed, rr)


def check_provider_class( class_name ):
    wls_class_name = class_name

    if ( class_name == 'AD'):
       wls_class_name = 'weblogic.security.providers.authentication.ActiveDirectoryAuthenticator';

    return wls_class_name


def create_provider(module):

    provider_name = module.params['provider_name']
    prov_provider_class = module.params['provider_class']

    prov_provider_class = check_provider_class ( prov_provider_class )

    rc, out, err, changed  = (0,'','',False)

    command ="edit()\n"
    command+="startEdit()\n"
    command+="rc=0\n"
    command+="realm = cmo.getSecurityConfiguration().getDefaultRealm()\n"
    command+="provider = realm.lookupAuthenticationProvider('" + provider_name + "')\n"
    command+="if provider:\n"
    command+="   stopEdit('y')\n"
    command+="   print >> sys.stderr, 'AD provider " + provider_name + " exist'\n"
    command+="   rc=1\n"    
    command+="else:\n"
    command+="   try:\n"
    command+="      provider = realm.createAuthenticationProvider('" + provider_name + "', '" + prov_provider_class + "')\n"

    command+=generate_prov_setting(module)

    command+="      save()\n"
    command+="      activate(block='true')\n"
    command+="      rc=0\n"
    command+="   except AttributeError, e:\n"
    command+="      stopEdit('y')\n"
    command+="      print >> sys.stderr, 'Unknown provider attribute ' \n"
    command+="      rc=1\n"
    command+="   except IllegalArgumentException, e:\n"
    command+="      stopEdit('y')\n"
    command+="      print >> sys.stderr, 'Unknown authentication provider' \n"
    command+="      rc=1\n"
    command+="\n"
    command+=add_restart_reqired()
    command+="\n"
    command+="exit('y',rc)\n"

    rc, out, err = wlst_command(module, command)

#    print "IN  ----------------------------"
#    print command + "\n"
#    print "OUT ----------------------------"
#    print out + "\n"
#    print "OUT ----------------------------"

    rr = check_restart_reqired(out)

    # Translate WLST script output code into Ansible RC and CHANGED variables    
    if rc == 0:
       rc = 0
       changed = True
       
    if rc == 1:
       rc = 1
       changed = False

    return (rc, out, err, changed,rr)



def parameter_check_for_class(module):
    provider_parameters = module.params['provider_parameters']
    provider_class = module.params['provider_class']

    required_ad_list = ["setPrincipal", "setCredential"]
    required_ad_list_counter = 0
    optional_ad_list = ["setGroupBaseDN", "setUserNameAttribute", "setUserFromNameFilter", "setUserBaseDN", "setGroupBaseDN", "setPort", "setHost"]

    if ( provider_class == 'AD1'):
       for k, v in provider_parameters.iteritems():
          if any([k in s for s in required_ad_list]):
             required_ad_list_counter+=1
          elif not any([k in s for s in optional_ad_list]):
             module.fail_json(msg="Unknown AD parameter " + k)

       if ( required_ad_list_counter != len(required_ad_list) ):
             module.fail_json(msg="Put all required AD parameters " + ','.join(required_ad_list))




def main():

    module = AnsibleModule(
        argument_spec = dict(
            state = dict(required=True, choices=['absent', 'present', 'check','order']),
            mw_home = dict(required=False, default='/u01/app/oracle/Middleware'),
            adminServerUrl = dict(required=True),
            username = dict(required=True),
            password = dict(required=True),
            force = dict(required=False, choices=BOOLEANS),
            wlst_output = dict(required=False, choices=BOOLEANS, default=False),
            provider_name = dict(required=False),
            provider_class = dict(required=False),
            provider_parameters = dict(required=False, type='dict'),
            provider_order = dict(required=False, type='list')
        ),
    )


    parameter_check_for_class(module)

    state = module.params['state']
    wlst_output = module.params['wlst_output']

    if state == 'present':
        rc, out, err, changed, isRestartRequired = create_provider(module)

    if state == 'absent':
        rc, out, err, changed, isRestartRequired = remove_provider(module)

    if state == 'check':
        rc, out, err, changed, isRestartRequired = check_provider(module)
    
    if state == 'order':
        rc, out, err, changed, isRestartRequired = change_order(module)

    if not wlst_output:
        out = ''

    module.exit_json(
        stdout      = out,
        stderr      = err,
        rc          = rc,
        isRestartRequired = isRestartRequired,
        changed     = changed
    )

from ansible.module_utils.basic import *
main()


